;/////////////////////////////////////////////////////////////////////////////////
;// Code Generator: BoostC Compiler - http://www.sourceboost.com
;// Version       : 7.03
;// License Type  : Pro License
;// Limitations   : PIC12,PIC16 max code size:Unlimited, max RAM banks:Unlimited
;/////////////////////////////////////////////////////////////////////////////////

//************************************************************************************
//**  
//**  File name:     E:\Skola\Mirkoracunari\Trcece svijetlo\trcece_svjetlo.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.5.2.1
//**  Date:          Sunday, November 05, 2017 15:58:47
//**  Licence:       Professional
//**  Registered to: xyz
//**  Licence key:   WUK7B9
//**  
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************


#define MX_PIC

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Defines for microcontroller
#define P16F877
#define FC_CAL_PIC
#define MX_ADC
#define MX_ADC_TYPE_30
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_TYPE2
#define MX_EE_SIZE 256
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT portc
#define MX_SPI_1_MISO_TRIS trisc
#define MX_SPI_1_MISO_PIN 4
#define MX_SPI_1_MOSI_PORT portc
#define MX_SPI_1_MOSI_TRIS trisc
#define MX_SPI_1_MOSI_PIN 5
#define MX_SPI_1_CLK_PORT portc
#define MX_SPI_1_CLK_TRIS trisc
#define MX_SPI_1_CLK_PIN 3
#define MX_SPI_1_SS_PORT portc
#define MX_SPI_1_SS_TRIS trisc
#define MX_UART_1
#define MX_UART_1_TX_PORT portc
#define MX_UART_1_TX_TRIS trisc
#define MX_UART_1_TX_PIN 6
#define MX_UART_1_RX_PORT portc
#define MX_UART_1_RX_TRIS trisc
#define MX_UART_1_RX_PIN 7
#define MX_I2C
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT portc
#define MX_I2C_1_SDA_TRIS trisc
#define MX_I2C_1_SDA_PIN 4
#define MX_I2C_1_SCL_PORT portc
#define MX_I2C_1_SCL_TRIS trisc
#define MX_I2C_1_SCL_PIN 3
#define MX_PWM
#define MX_PWM_CNT 2
#define MX_PWM_PSCA1
#define MX_PWM_PSCA4
#define MX_PWM_PSCA16
#define MX_PWM_1_PORT portc
#define MX_PWM_1_TRIS trisc
#define MX_PWM_1_PIN 2
#define MX_PWM_2_PORT portc
#define MX_PWM_2_TRIS trisc
#define MX_PWM_2_PIN 1

//Functions
#define MX_CLK_SPEED 10000000
#ifdef _BOOSTC
#include <system.h>
#endif
#ifdef HI_TECH_C
#include <pic.h>
#endif

//Configuration data
#ifdef _BOOSTC
#pragma DATA 0x2007, 0x3f7a
#endif
#ifdef HI_TECH_C
__CONFIG(0x3f7a);
#endif

//Internal functions
#include "C:\Program Files (x86)\Flowcode\v5\FCD\internals.c"

//Macro function declarations


//Variable declarations
#define FCV_TRUE (1)
#define FCV_FALSE (0)



#include "C:\Program Files (x86)\Flowcode\v5\CAL\includes.c"

//Macro implementations

//U ovom projektu trebamo simulirati trcece svijetlo


void main()

{
	//Initialization
	adcon1 = 0x07;
0028  3007  	MOVLW 0x07
0029  1683  	BSF STATUS, RP0
002A  1303  	BCF STATUS, RP1
002B  009F  	MOVWF gbl_adcon1



	//Interrupt initialization code
	option_reg = 0xC0;
002C  30C0  	MOVLW 0xC0
002D  0081  	MOVWF gbl_option_reg



	//Gasimo sve led na portu B
	//Output: 255 -> PORTB
	trisb = 0x00;
002E  0186  	CLRF gbl_trisb

	portb = (255);
002F  30FF  	MOVLW 0xFF
0030  1283  	BCF STATUS, RP0
0031  0086  	MOVWF gbl_portb


	//Loop
	//Loop: While 1
	while (1)
0032        label3
0073  2832  	GOTO	label3

	{

		//Palimo prvu i zadnju led
		//Output: 126 -> PORTB
		trisb = 0x00;
0032  1683  	BSF STATUS, RP0
0033  0186  	CLRF gbl_trisb

		portb = (126);
0034  307E  	MOVLW 0x7E
0035  1283  	BCF STATUS, RP0
0036  0086  	MOVWF gbl_portb


		//Vrijeme za koje svijetle led 
		//Delay: 200 ms
		delay_ms(200);
0037  30C8  	MOVLW 0xC8
0038  00C2  	MOVWF delay_ms_00000_arg_del
0039  2010  	CALL delay_ms_00000


		//Palimo drugu i sedmu led 
		//Output: 189 -> PORTB
		trisb = 0x00;
003A  1683  	BSF STATUS, RP0
003B  0186  	CLRF gbl_trisb

		portb = (189);
003C  30BD  	MOVLW 0xBD
003D  1283  	BCF STATUS, RP0
003E  0086  	MOVWF gbl_portb


		//Vrijeme za koje svijetle led 
		//Delay: 200 ms
		delay_ms(200);
003F  30C8  	MOVLW 0xC8
0040  00C2  	MOVWF delay_ms_00000_arg_del
0041  2010  	CALL delay_ms_00000


		//Palimo trecu i sestu led 
		//Output: 219 -> PORTB
		trisb = 0x00;
0042  1683  	BSF STATUS, RP0
0043  0186  	CLRF gbl_trisb

		portb = (219);
0044  30DB  	MOVLW 0xDB
0045  1283  	BCF STATUS, RP0
0046  0086  	MOVWF gbl_portb


		//Vrijeme za koje svijetle led 
		//Delay: 200 ms
		delay_ms(200);
0047  30C8  	MOVLW 0xC8
0048  00C2  	MOVWF delay_ms_00000_arg_del
0049  2010  	CALL delay_ms_00000


		//Palimo cetvrtu i petu led 
		//Output: 231 -> PORTB
		trisb = 0x00;
004A  1683  	BSF STATUS, RP0
004B  0186  	CLRF gbl_trisb

		portb = (231);
004C  30E7  	MOVLW 0xE7
004D  1283  	BCF STATUS, RP0
004E  0086  	MOVWF gbl_portb


		//Vrijeme za koje svijetle led
		//Delay: 200 ms
		delay_ms(200);
004F  30C8  	MOVLW 0xC8
0050  00C2  	MOVWF delay_ms_00000_arg_del
0051  2010  	CALL delay_ms_00000


		//Palimo trecu i sestu led 
		//Output: 219 -> PORTB
		trisb = 0x00;
0052  1683  	BSF STATUS, RP0
0053  0186  	CLRF gbl_trisb

		portb = (219);
0054  30DB  	MOVLW 0xDB
0055  1283  	BCF STATUS, RP0
0056  0086  	MOVWF gbl_portb


		//Vrijeme za koje svijetle led
		//Delay: 500 ms
		delay_ms(255);
0057  30FF  	MOVLW 0xFF
0058  00C2  	MOVWF delay_ms_00000_arg_del
0059  2010  	CALL delay_ms_00000

		delay_ms(245);
005A  30F5  	MOVLW 0xF5
005B  00C2  	MOVWF delay_ms_00000_arg_del
005C  2010  	CALL delay_ms_00000


		//Palimo drugu i sedmu led 
		//Output: 189 -> PORTB
		trisb = 0x00;
005D  1683  	BSF STATUS, RP0
005E  0186  	CLRF gbl_trisb

		portb = (189);
005F  30BD  	MOVLW 0xBD
0060  1283  	BCF STATUS, RP0
0061  0086  	MOVWF gbl_portb


		//Vrijeme za koje svijetle led
		//Delay: 500 ms
		delay_ms(255);
0062  30FF  	MOVLW 0xFF
0063  00C2  	MOVWF delay_ms_00000_arg_del
0064  2010  	CALL delay_ms_00000

		delay_ms(245);
0065  30F5  	MOVLW 0xF5
0066  00C2  	MOVWF delay_ms_00000_arg_del
0067  2010  	CALL delay_ms_00000


		//Palimo prvu i zadnju led 
		//Output: 126 -> PORTB
		trisb = 0x00;
0068  1683  	BSF STATUS, RP0
0069  0186  	CLRF gbl_trisb

		portb = (126);
006A  307E  	MOVLW 0x7E
006B  1283  	BCF STATUS, RP0
006C  0086  	MOVWF gbl_portb


		//Vrijeme za koje svijetle led 
		//Delay: 500 ms
		delay_ms(255);
006D  30FF  	MOVLW 0xFF
006E  00C2  	MOVWF delay_ms_00000_arg_del
006F  2010  	CALL delay_ms_00000

		delay_ms(245);
0070  30F5  	MOVLW 0xF5
0071  00C2  	MOVWF delay_ms_00000_arg_del
0072  2010  	CALL delay_ms_00000



	}

	mainendloop: goto mainendloop;
}


void MX_INTERRUPT_MACRO(void)

{
}
009C  1283  	BCF STATUS, RP0
009D  1303  	BCF STATUS, RP1
009E  0E36  	SWAPF Int1BContext+D'2', W
009F  0084  	MOVWF FSR
00A0  0E35  	SWAPF Int1BContext+D'1', W
00A1  008A  	MOVWF PCLATH
00A2  0E34  	SWAPF Int1BContext, W
00A3  0083  	MOVWF STATUS
00A4  0EFF  	SWAPF Int1Context, F
00A5  0E7F  	SWAPF Int1Context, W
00A6  0009  	RETFIE





////////////////////////////////////////
// Code with no source :-)
////////////////////////////////////////
0000  2874  	GOTO	_startup

0004  00FF  	MOVWF Int1Context
0005  0E03  	SWAPF STATUS, W
0006  1283  	BCF STATUS, RP0
0007  1303  	BCF STATUS, RP1
0008  00B4  	MOVWF Int1BContext
0009  0E0A  	SWAPF PCLATH, W
000A  00B5  	MOVWF Int1BContext+D'1'
000B  0E04  	SWAPF FSR, W
000C  00B6  	MOVWF Int1BContext+D'2'
000D  118A  	BCF PCLATH,3
000E  120A  	BCF PCLATH,4
000F  289C  	GOTO	interrupt
0010        delay_ms_00000
0010        ; { delay_ms ; function begin
0010  08C2  	MOVF delay_ms_00000_arg_del, F
0011  1D03  	BTFSS STATUS,Z
0012  2814  	GOTO	label1
0013  0008  	RETURN
0014        label1
0014  30F9  	MOVLW 0xF9
0015        label2
0015  0000  	NOP
0016  0000  	NOP
0017  0000  	NOP
0018  0000  	NOP
0019  0000  	NOP
001A  0000  	NOP
001B  3EFF  	ADDLW 0xFF
001C  1D03  	BTFSS STATUS,Z
001D  2815  	GOTO	label2
001E  0000  	NOP
001F  0000  	NOP
0020  0000  	NOP
0021  0000  	NOP
0022  0000  	NOP
0023  0000  	NOP
0024  0000  	NOP
0025  0BC2  	DECFSZ delay_ms_00000_arg_del, F
0026  2814  	GOTO	label1
0027  0008  	RETURN
0028        ; } delay_ms function end


0074        _startup
0074  30D5  	MOVLW 0xD5
0075  1283  	BCF STATUS, RP0
0076  1303  	BCF STATUS, RP1
0077  00A0  	MOVWF gbl_14_LSR
0078  30C4  	MOVLW 0xC4
0079  00A1  	MOVWF gbl_14_LSR+D'1'
007A  30BB  	MOVLW 0xBB
007B  00A2  	MOVWF gbl_14_LSR+D'2'
007C  30DC  	MOVLW 0xDC
007D  00A3  	MOVWF gbl_14_LSR+D'3'
007E  01A4  	CLRF gbl_15_gbl_aSig
007F  01A5  	CLRF gbl_15_gbl_aSig+D'1'
0080  01A6  	CLRF gbl_15_gbl_aSig+D'2'
0081  01A7  	CLRF gbl_15_gbl_aSig+D'3'
0082  01A8  	CLRF gbl_15_gbl_bSig
0083  01A9  	CLRF gbl_15_gbl_bSig+D'1'
0084  01AA  	CLRF gbl_15_gbl_bSig+D'2'
0085  01AB  	CLRF gbl_15_gbl_bSig+D'3'
0086  01AC  	CLRF gbl_15_gbl_zSig
0087  01AD  	CLRF gbl_15_gbl_zSig+D'1'
0088  01AE  	CLRF gbl_15_gbl_zSig+D'2'
0089  01AF  	CLRF gbl_15_gbl_zSig+D'3'
008A  01BC  	CLRF gbl_15_gbl_aExp
008B  01BD  	CLRF gbl_15_gbl_bExp
008C  01B7  	CLRF gbl_15_gbl_zExp
008D  01B8  	CLRF gbl_15_gbl_zExp+D'1'
008E  01BE  	CLRF gbl_15_gbl_aSign
008F  01BF  	CLRF gbl_15_gbl_bSign
0090  01C0  	CLRF gbl_15_gbl_zSign
0091  01C1  	CLRF gbl_15_gbl_zSigZero
0092  01B0  	CLRF gbl_15_gbl_ret
0093  01B1  	CLRF gbl_15_gbl_ret+D'1'
0094  01B2  	CLRF gbl_15_gbl_ret+D'2'
0095  01B3  	CLRF gbl_15_gbl_ret+D'3'
0096  01BA  	CLRF gbl_float_rounding_mode
0097  01BB  	CLRF gbl_float_exception_flags
0098  01B9  	CLRF gbl_float_detect_tininess
0099  118A  	BCF PCLATH,3
009A  120A  	BCF PCLATH,4
009B  2828  	GOTO	main

2007  3F7A  	DW 0x3F7A
